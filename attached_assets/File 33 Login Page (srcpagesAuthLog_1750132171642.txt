File 33: Login Page (src/pages/Auth/Login.jsx)
jsx
import React, { useState } from 'react';
import { Link, Navigate } from 'react-router-dom';
import { Card, Heading, Input, Button, Checkbox, Alert } from '@replit/ui';
import { LogIn, Eye, EyeOff } from 'lucide-react';
import { useAuth } from '../../contexts/AuthContext';
import { useTheme } from '../../contexts/ThemeContext';
import './Login.css';

const Login = () => {
  const [formData, setFormData] = useState({
    email: '',
    password: '',
    rememberMe: false
  });
  const [showPassword, setShowPassword] = useState(false);
  const [errors, setErrors] = useState({});
  
  const { login, loading, error, isAuthenticated } = useAuth();
  const { theme } = useTheme();

  // Redirect if already authenticated
  if (isAuthenticated) {
    return <Navigate to="/dashboard" replace />;
  }

  const handleChange = (e) => {
    const { name, value, type, checked } = e.target;
    setFormData(prev => ({
      ...prev,
      [name]: type === 'checkbox' ? checked : value
    }));
    
    // Clear error when user starts typing
    if (errors[name]) {
      setErrors(prev => ({ ...prev, [name]: null }));
    }
  };

  const validateForm = () => {
    const newErrors = {};

    if (!formData.email) {
      newErrors.email = 'Email is required';
    } else if (!/\S+@\S+\.\S+/.test(formData.email)) {
      newErrors.email = 'Please enter a valid email address';
    }

    if (!formData.password) {
      newErrors.password = 'Password is required';
    } else if (formData.password.length < 6) {
      newErrors.password = 'Password must be at least 6 characters';
    }

    setErrors(newErrors);
    return Object.keys(newErrors).length === 0;
  };

  const handleSubmit = async (e) => {
    e.preventDefault();
    
    if (!validateForm()) {
      return;
    }

    try {
      await login(formData);
    } catch (err) {
      console.error('Login error:', err);
    }
  };

  return (
    <div className={`login-page ${theme}`}>
      <div className="login-container">
        <Card className="login-card">
          <div className="login-header">
            <div className="logo-section">
              <div className="logo">
                <LogIn size={32} />
              </div>
              <Heading size="large">Zero Gate</Heading>
              <p className="tagline">ESO Platform Login</p>
            </div>
          </div>

          <form onSubmit={handleSubmit} className="login-form">
            {error && (
              <Alert variant="destructive" className="login-error">
                {error}
              </Alert>
            )}

            <div className="form-group">
              <label htmlFor="email">Email Address</label>
              <Input
                id="email"
                name="email"
                type="email"
                value={formData.email}
                onChange={handleChange}
                placeholder="Enter your email"
                className={errors.email ? 'error' : ''}
                disabled={loading}
              />
              {errors.email && (
                <span className="error-text">{errors.email}</span>
              )}
            </div>

            <div className="form-group">
              <label htmlFor="password">Password</label>
              <div className="password-input">
                <Input
                  id="password"
                  name="password"
                  type={showPassword ? 'text' : 'password'}
                  value={formData.password}
                  onChange={handleChange}
                  placeholder="Enter your password"
                  className={errors.password ? 'error' : ''}
                  disabled={loading}
                />
                <button
                  type="button"
                  className="password-toggle"
                  onClick={() => setShowPassword(!showPassword)}
                  tabIndex={-1}
                >
                  {showPassword ? <EyeOff size={16} /> : <Eye size={16} />}
                </button>
              </div>
              {errors.password && (
                <span className="error-text">{errors.password}</span>
              )}
            </div>

            <div className="form-group checkbox-group">
              <Checkbox
                id="rememberMe"
                name="rememberMe"
                checked={formData.rememberMe}
                onChange={handleChange}
                disabled={loading}
              />
              <label htmlFor="rememberMe">Remember me</label>
            </div>

            <Button
              type="submit"
              className="login-button"
              disabled={loading}
              variant="primary"
              size="large"
            >
              {loading ? 'Signing in...' : 'Sign In'}
            </Button>
          </form>

          <div className="login-footer">
            <div className="auth-links">
              <Link to="/forgot-password" className="auth-link">
                Forgot your password?
              </Link>
              <Link to="/register" className="auth-link">
                Don't have an account? Sign up
              </Link>
            </div>
          </div>
        </Card>

        <div className="login-info">
          <Card className="info-card">
            <h3>Welcome to Zero Gate</h3>
            <p>
              The comprehensive platform for Entrepreneur Support Organizations. 
              Manage sponsor relationships, track grants, and visualize your network 
              with our hybrid relationship mapping technology.
            </p>
            <ul className="feature-list">
              <li>Multi-tenant organization management</li>
              <li>Hybrid relationship mapping</li>
              <li>Grant timeline management</li>
              <li>Microsoft 365 integration</li>
              <li>Executive dashboards</li>
            </ul>
          </Card>
        </div>
      </div>
    </div>
  );
};

export default Login;
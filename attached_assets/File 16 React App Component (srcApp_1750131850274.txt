File 16: React App Component (src/App.js)
jsx
import React, { Suspense } from 'react';
import { BrowserRouter as Router, Routes, Route, Navigate } from 'react-router-dom';
import { QueryClient, QueryClientProvider } from 'react-query';
import { ROOT_THEME_CLASS } from '@replit/ui';
import Styles from '@replit/ui/Styles';
import { ErrorBoundary } from './components/common/ErrorBoundary';
import LoadingSpinner from './components/common/LoadingSpinner';

// Contexts
import { AuthProvider } from './contexts/AuthContext';
import { TenantProvider } from './contexts/TenantContext';
import { ThemeProvider } from './contexts/ThemeContext';
import { ResourceProvider } from './contexts/ResourceContext';

// Components
import AppLayout from './components/layout/AppLayout';
import ProtectedRoute from './components/common/ProtectedRoute';

// Lazy load pages for better performance
const Login = React.lazy(() => import('./pages/Auth/Login'));
const TenantSelection = React.lazy(() => import('./pages/Auth/TenantSelection'));
const Dashboard = React.lazy(() => import('./pages/Dashboard'));
const RelationshipMapping = React.lazy(() => import('./pages/RelationshipMapping'));
const SponsorManagement = React.lazy(() => import('./pages/SponsorManagement'));
const GrantManagement = React.lazy(() => import('./pages/GrantManagement'));
const ContentCalendar = React.lazy(() => import('./pages/ContentCalendar'));
const Settings = React.lazy(() => import('./pages/Settings'));

// Configure React Query for Replit constraints
const queryClient = new QueryClient({
  defaultOptions: {
    queries: {
      refetchOnWindowFocus: false,
      retry: (failureCount, error) => {
        if (error?.response?.status === 401 || error?.response?.status === 403) {
          return false;
        }
        return failureCount < 2;
      },
      staleTime: 5 * 60 * 1000, // 5 minutes
      cacheTime: 10 * 60 * 1000, // 10 minutes
    },
    mutations: {
      retry: 1,
    },
  },
});

function App() {
  return (
    <ErrorBoundary>
      <QueryClientProvider client={queryClient}>
        <ResourceProvider>
          <ThemeProvider>
            <AuthProvider>
              <TenantProvider>
                <>
                  <Styles />
                  <div className={ROOT_THEME_CLASS}>
                    <Router>
                      <Suspense fallback={<LoadingSpinner />}>
                        <Routes>
                          {/* Public Routes */}
                          <Route path="/login" element={<Login />} />
                          <Route path="/tenant-selection" element={<TenantSelection />} />
                          
                          {/* Protected Routes */}
                          <Route path="/" element={
                            <ProtectedRoute>
                              <AppLayout />
                            </ProtectedRoute>
                          }>
                            <Route index element={<Navigate to="/dashboard" replace />} />
                            <Route path="dashboard" element={<Dashboard />} />
                            <Route path="relationships" element={<RelationshipMapping />} />
                            <Route path="sponsors/*" element={<SponsorManagement />} />
                            <Route path="grants/*" element={<GrantManagement />} />
                            <Route path="calendar" element={<ContentCalendar />} />
                            <Route path="settings" element={<Settings />} />
                          </Route>
                          
                          <Route path="*" element={<Navigate to="/dashboard" replace />} />
                        </Routes>
                      </Suspense>
                    </Router>
                  </div>
                </>
              </TenantProvider>
            </AuthProvider>
          </ThemeProvider>
        </ResourceProvider>
      </QueryClientProvider>
    </ErrorBoundary>
  );
}

export default App;